name: Auto-merge Dependabot PRs

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
            - name: Compatibility Checks
        id: compatibility
        run: |
          echo "üîç Running compatibility checks..."
          
          # Check Python version compatibility
          echo "üìç Checking Python version compatibility..."
          python --version
          
          # Check requirements.txt syntax
          echo "üì¶ Validating requirements.txt syntax..."
          python -m pip check || {
            echo "::error::Requirements compatibility check failed"
            exit 1
          }
          
          # Test core imports with compatibility checks
          echo "üêç Testing Python imports compatibility..."
          python -c "
          import sys
          import importlib
          import warnings
          
          # Capture warnings for compatibility issues
          with warnings.catch_warnings(record=True) as w:
              warnings.simplefilter('always')
              
              try:
                  import server
                  print('‚úÖ Server module imported successfully')
              except ImportError as e:
                  print(f'‚ùå Server import failed: {e}')
                  sys.exit(1)
              except Exception as e:
                  print(f'‚ö†Ô∏è  Server import warning: {e}')
          
              # Check for compatibility warnings
              if w:
                  for warning in w:
                      print(f'‚ö†Ô∏è  Compatibility warning: {warning.message}')
          "
          
          # Test toolkit imports with compatibility
          echo "üõ†Ô∏è Testing toolkit compatibility..."
          python -c "
          import sys
          import os
          import warnings
          sys.path.append('toolkit')
          
          modules = ['nmap', 'holehe', 'sherlock', 'sqlmap', 'sublist3r', 'dnsrecon', 'wpscan', 'zmap', 'ocr2text']
          failed_modules = []
          warning_modules = []
          
          for module in modules:
              try:
                  with warnings.catch_warnings(record=True) as w:
                      warnings.simplefilter('always')
                      __import__(module)
                      
                      if w:
                          warning_modules.append((module, [str(warning.message) for warning in w]))
                          print(f'‚ö†Ô∏è  {module} imported with warnings')
                      else:
                          print(f'‚úÖ {module} imported successfully')
              except ImportError as e:
                  failed_modules.append(module)
                  print(f'‚ùå {module} import failed: {e}')
              except Exception as e:
                  warning_modules.append((module, [str(e)]))
                  print(f'‚ö†Ô∏è  {module} import warning: {e}')
          
          if failed_modules:
              print(f'‚ùå Failed modules: {failed_modules}')
              sys.exit(1)
          
          if warning_modules:
              print(f'‚ö†Ô∏è  Modules with warnings: {[m[0] for m in warning_modules]}')
              # Don't fail on warnings, just log them
          
          print('‚úÖ All toolkit modules compatibility check passed')
          "
          
          # Check dependency compatibility
          echo "üîó Checking dependency compatibility..."
          pip install --dry-run --quiet -r requirements.txt 2>&1 | grep -E "(conflict|incompatible|ERROR)" && {
            echo "::error::Dependency compatibility issues detected"
            exit 1
          } || echo "‚úÖ No dependency conflicts detected"
          
          # Verify requirements integrity
          echo "üîê Verifying requirements integrity..."
          pip freeze | grep -f requirements.txt > /dev/null || {
            echo "::warning::Some requirements may not be properly installed"
          }
          
          echo "‚úÖ Compatibility checks completed successfully"
          echo "compatible=true" >> $GITHUB_OUTPUT
          
      - name: Run basic tests
        if: steps.compatibility.outputs.compatible == 'true'
        run: |
          echo "üß™ Running basic functionality tests..."
          
          # Basic import test to ensure the server can be imported
          python -c "import server; print('Server module imported successfully')"
          
          # Test toolkit imports
          python -c "
          import sys
          import os
          sys.path.append('toolkit')
          
          # Test core toolkit modules
          try:
              import nmap
              import holehe
              import sherlock
              import sqlmap
              import sublist3r
              import dnsrecon
              import wpscan
              import zmap
              import ocr2text
              print('All toolkit modules imported successfully')
          except ImportError as e:
              print(f'Import error: {e}')
              sys.exit(1)
          "
          
      - name: Docker build test
        if: steps.compatibility.outputs.compatible == 'true'
        run: |
          echo "üê≥ Testing Docker compatibility..."
          docker build -t whiterabbitmcp-test .
          
          # Test container compatibility
          docker run --rm whiterabbitmcp-test python -c "
          import sys
          print(f'Python version in container: {sys.version}')
          
          # Test basic functionality in container
          import server
          print('‚úÖ Container compatibility test passed')
          "
          
          echo "‚úÖ Docker build and compatibility test successful"
            - name: Auto-merge patch updates
        if: ${{ steps.compatibility.outputs.compatible == 'true' && steps.metadata.outputs.update-type == 'version-update:semver-patch' }}
        run: |
          echo "‚úÖ Compatibility checks passed - Auto-merging patch update for ${{ steps.metadata.outputs.dependency-names }}"
          gh pr merge --auto --squash "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Auto-merge minor updates for dev dependencies
        if: ${{ steps.compatibility.outputs.compatible == 'true' && steps.metadata.outputs.update-type == 'version-update:semver-minor' && steps.metadata.outputs.dependency-type == 'direct:development' }}
        run: |
          echo "‚úÖ Compatibility checks passed - Auto-merging minor dev dependency update for ${{ steps.metadata.outputs.dependency-names }}"
          gh pr merge --auto --squash "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Comment on compatibility issues
        if: ${{ steps.compatibility.outputs.compatible != 'true' }}
        run: |
          gh pr comment "$PR_URL" --body "‚ö†Ô∏è **Compatibility Issues Detected!** 
          
          The compatibility checks failed for this dependency update. 
          
          **Dependency:** ${{ steps.metadata.outputs.dependency-names }}
          **Update Type:** ${{ steps.metadata.outputs.update-type }}
          **Issue:** Compatibility verification failed during automated checks
          
          Please review the workflow logs and test the changes manually before merging.
          
          **Next Steps:**
          1. Check the compatibility test logs in the workflow run
          2. Test the changes locally
          3. Fix any compatibility issues
          4. Manual review and merge required"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Comment on major updates
        if: ${{ steps.metadata.outputs.update-type == 'version-update:semver-major' }}
        run: |
          gh pr comment "$PR_URL" --body "üö® **Major version update detected!** 
          
          This PR contains a major version update for ${{ steps.metadata.outputs.dependency-names }}. 
          Please review carefully as this may include breaking changes.
          
          **Dependency:** ${{ steps.metadata.outputs.dependency-names }}
          **Update Type:** ${{ steps.metadata.outputs.update-type }}
          **Dependency Type:** ${{ steps.metadata.outputs.dependency-type }}
          
          Manual review and approval required before merging."
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Add labels based on update type
        run: |
          if [[ "${{ steps.compatibility.outputs.compatible }}" != "true" ]]; then
            gh pr edit "$PR_URL" --add-label "compatibility-issues,needs-review"
          elif [[ "${{ steps.metadata.outputs.update-type }}" == "version-update:semver-major" ]]; then
            gh pr edit "$PR_URL" --add-label "major-update,needs-review"
          elif [[ "${{ steps.metadata.outputs.update-type }}" == "version-update:semver-minor" ]]; then
            gh pr edit "$PR_URL" --add-label "minor-update,auto-merged"
          else
            gh pr edit "$PR_URL" --add-label "patch-update,auto-merged"
          fi
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
